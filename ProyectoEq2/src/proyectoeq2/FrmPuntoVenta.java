/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyectoeq2;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Samuel
 */
public class FrmPuntoVenta extends javax.swing.JFrame {

    int cantidadProdutos = 0;

    /**
     * Creates new form frmProductos
     */
    private Productos productos = new Productos();

    public FrmPuntoVenta() {
        initComponents();
        llenarTabla();
    }

    private void llenarTabla() {
        DefaultTableModel modelo = (DefaultTableModel) tblDulceria.getModel();
        DefaultTableModel modeloPapeleria = (DefaultTableModel) tblPapeleria.getModel();
        DefaultTableModel modeloSalud = (DefaultTableModel) tblSalud.getModel();
        ArrayList<Producto> prods = productos.getLista();
        modelo.setRowCount(0);

        for (Producto prod : prods) {
            switch (prod.getModulo()) {
                case "dulcería":
                    modelo.addRow(new Object[]{prod.getIDProducto(), prod.getNombre(), prod.getPrecio(), prod.getExistencias()});
                    break;
                case "papelería":
                    modeloPapeleria.addRow(new Object[]{prod.getIDProducto(), prod.getNombre(), prod.getPrecio(), prod.getExistencias()});
                    break;
                default:
                    modeloSalud.addRow(new Object[]{prod.getIDProducto(), prod.getNombre(), prod.getPrecio(), prod.getExistencias()});
                    break;
            }
        }

        tblDulceria.setModel(modelo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlControl = new javax.swing.JPanel();
        pnlElemento = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        lblCantProductos = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblCambio = new javax.swing.JLabel();
        btnTerminarVenta = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtMontoNeto = new javax.swing.JTextField();
        lblTotal = new javax.swing.JLabel();
        pnlTotales = new javax.swing.JPanel();
        btnAgregarProducto = new javax.swing.JButton();
        btnQuitarProducto = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        txtCantidad = new javax.swing.JTextField();
        pnlBarraInferior = new javax.swing.JPanel();
        btnSalir = new javax.swing.JButton();
        lblFechaHora = new javax.swing.JLabel();
        pnlVenta = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCarrito = new javax.swing.JTable();
        tabbedPaneModulos = new javax.swing.JTabbedPane();
        sPaneDulceria = new javax.swing.JScrollPane();
        tblDulceria = new javax.swing.JTable();
        sPanePapeleria = new javax.swing.JScrollPane();
        tblPapeleria = new javax.swing.JTable();
        sPaneSalud = new javax.swing.JScrollPane();
        tblSalud = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Punto de venta");
        setBounds(new java.awt.Rectangle(0, 0, 800, 600));
        setMaximumSize(new java.awt.Dimension(800, 600));
        setPreferredSize(new java.awt.Dimension(800, 600));

        pnlControl.setBackground(new java.awt.Color(204, 204, 255));
        pnlControl.setPreferredSize(new java.awt.Dimension(250, 329));
        pnlControl.setLayout(new java.awt.BorderLayout());

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Productos: ");

        lblCantProductos.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblCantProductos.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCantProductos.setText("3");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Total:");

        lblCambio.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblCambio.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCambio.setText("-");

        btnTerminarVenta.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnTerminarVenta.setText("Terminar Venta");
        btnTerminarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTerminarVentaActionPerformed(evt);
            }
        });

        btnCancelar.setBackground(new java.awt.Color(255, 204, 204));
        btnCancelar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Paga con:");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Cambio:");

        txtMontoNeto.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtMontoNeto.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtMontoNeto.setText("500");
        txtMontoNeto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMontoNetoActionPerformed(evt);
            }
        });

        lblTotal.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTotal.setText("-");

        javax.swing.GroupLayout pnlElementoLayout = new javax.swing.GroupLayout(pnlElemento);
        pnlElemento.setLayout(pnlElementoLayout);
        pnlElementoLayout.setHorizontalGroup(
            pnlElementoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlElementoLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(pnlElementoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel5)
                    .addComponent(jLabel8)
                    .addComponent(jLabel3))
                .addGap(29, 36, Short.MAX_VALUE)
                .addGroup(pnlElementoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lblCantProductos, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(txtMontoNeto, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(lblTotal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblCambio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(19, 19, 19))
            .addGroup(pnlElementoLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(btnTerminarVenta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(12, 12, 12))
        );
        pnlElementoLayout.setVerticalGroup(
            pnlElementoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlElementoLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(pnlElementoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lblCantProductos))
                .addGap(18, 18, 18)
                .addGroup(pnlElementoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(lblTotal))
                .addGap(12, 12, 12)
                .addGroup(pnlElementoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMontoNeto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(pnlElementoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(lblCambio))
                .addGap(18, 18, 18)
                .addGroup(pnlElementoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTerminarVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(483, Short.MAX_VALUE))
        );

        pnlControl.add(pnlElemento, java.awt.BorderLayout.LINE_END);

        pnlTotales.setPreferredSize(new java.awt.Dimension(250, 180));

        btnAgregarProducto.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnAgregarProducto.setText("Agregar producto");
        btnAgregarProducto.setMaximumSize(new java.awt.Dimension(125, 26));
        btnAgregarProducto.setMinimumSize(new java.awt.Dimension(125, 26));
        btnAgregarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarProductoActionPerformed(evt);
            }
        });

        btnQuitarProducto.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnQuitarProducto.setText("Quitar");
        btnQuitarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarProductoActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("ID:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Cantidad:");

        txtID.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        txtCantidad.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        javax.swing.GroupLayout pnlTotalesLayout = new javax.swing.GroupLayout(pnlTotales);
        pnlTotales.setLayout(pnlTotalesLayout);
        pnlTotalesLayout.setHorizontalGroup(
            pnlTotalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTotalesLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(pnlTotalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlTotalesLayout.createSequentialGroup()
                        .addComponent(btnQuitarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAgregarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6))
                    .addGroup(pnlTotalesLayout.createSequentialGroup()
                        .addGroup(pnlTotalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(pnlTotalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtID)
                            .addComponent(txtCantidad, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlTotalesLayout.setVerticalGroup(
            pnlTotalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTotalesLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(pnlTotalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(pnlTotalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlTotalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnQuitarProducto, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                    .addComponent(btnAgregarProducto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        pnlControl.add(pnlTotales, java.awt.BorderLayout.NORTH);

        getContentPane().add(pnlControl, java.awt.BorderLayout.EAST);

        pnlBarraInferior.setPreferredSize(new java.awt.Dimension(723, 50));

        btnSalir.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        lblFechaHora.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        String fecha = java.time.LocalDate.now().toString();
        String hora = java.time.LocalTime.now().toString();
        lblFechaHora.setText(fecha + ";   " + hora.substring(0,5));

        javax.swing.GroupLayout pnlBarraInferiorLayout = new javax.swing.GroupLayout(pnlBarraInferior);
        pnlBarraInferior.setLayout(pnlBarraInferiorLayout);
        pnlBarraInferiorLayout.setHorizontalGroup(
            pnlBarraInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBarraInferiorLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(lblFechaHora, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 320, Short.MAX_VALUE)
                .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(71, 71, 71))
        );
        pnlBarraInferiorLayout.setVerticalGroup(
            pnlBarraInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBarraInferiorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBarraInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSalir, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(lblFechaHora, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        getContentPane().add(pnlBarraInferior, java.awt.BorderLayout.SOUTH);

        pnlVenta.setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jScrollPane2.setMinimumSize(new java.awt.Dimension(16, 250));

        tblCarrito.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tblCarrito.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Prod", "Producto", "Cant", "Precio", "Subtotal"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCarrito.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        tblCarrito.setMinimumSize(new java.awt.Dimension(60, 250));
        tblCarrito.setPreferredSize(new java.awt.Dimension(300, 250));
        tblCarrito.getTableHeader().setReorderingAllowed(false);
        tblCarrito.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCarritoMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblCarrito);
        tblCarrito.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tblCarrito.getColumnModel().getColumnCount() > 0) {
            tblCarrito.getColumnModel().getColumn(1).setPreferredWidth(150);
            tblCarrito.getColumnModel().getColumn(2).setPreferredWidth(30);
        }

        jSplitPane1.setTopComponent(jScrollPane2);

        sPaneDulceria.setName("TTT"); // NOI18N

        tblDulceria.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tblDulceria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Dulce", "Dulce", "2", "4"}
            },
            new String [] {
                "ID Producto", "Producto", "Precio", "Existencia"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDulceria.getTableHeader().setReorderingAllowed(false);
        tblDulceria.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDulceriaMouseClicked(evt);
            }
        });
        sPaneDulceria.setViewportView(tblDulceria);
        tblDulceria.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        tabbedPaneModulos.addTab("Dulceria", null, sPaneDulceria, "Productos de dulcería");

        tblPapeleria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Hoja", "Hoja", "5", "150"}
            },
            new String [] {
                "ID Producto", "Producto", "Precio", "Existencia"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPapeleria.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPapeleriaMouseClicked(evt);
            }
        });
        sPanePapeleria.setViewportView(tblPapeleria);

        tabbedPaneModulos.addTab("Papeleria", sPanePapeleria);

        tblSalud.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Shampoo", "Shampoo", "35", "400"}
            },
            new String [] {
                "ID Producto", "Producto", "Precio", "Existencia"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSalud.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSaludMouseClicked(evt);
            }
        });
        sPaneSalud.setViewportView(tblSalud);

        tabbedPaneModulos.addTab("Salud y Belleza", sPaneSalud);

        jSplitPane1.setRightComponent(tabbedPaneModulos);

        pnlVenta.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(pnlVenta, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    void guardarVentas() {
        DefaultTableModel tblModel = (DefaultTableModel) tblCarrito.getModel();
        String fecha = java.time.LocalDate.now().toString();
        String horaAux = java.time.LocalTime.now().toString();
        String hora = java.time.LocalTime.now().toString().substring(0, 8);
        String usuario;
        double total = 0;
        for (int i = 0; i < tblModel.getRowCount(); i++) {
            total += Double.parseDouble(tblModel.getValueAt(i, 4).toString());
        }
        String idVenta = "idx" + horaAux.substring(5, 10) + String.valueOf(Math.round(total));

        try {
            String idProducto;
            String producto;
            String cantidad;
            String precio;
            String subtotal;
            DataOutputStream dataOut = new DataOutputStream(new FileOutputStream("ventaDetallada.txt", true));
            for (int i = 0; i < tblModel.getRowCount(); i++) {
                idProducto = tblModel.getValueAt(i, 0).toString();
                producto = tblModel.getValueAt(i, 1).toString();
                cantidad = tblModel.getValueAt(i, 2).toString();
                precio = tblModel.getValueAt(i, 3).toString();
                subtotal = String.valueOf(Integer.parseInt(cantidad) * Double.parseDouble(precio));
                dataOut.writeUTF(idVenta);
                dataOut.writeUTF(idProducto);
                dataOut.writeUTF(producto);
                dataOut.writeUTF(cantidad);
                dataOut.writeUTF(precio);
                dataOut.writeUTF(subtotal);
            }
            dataOut.close();
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }

        try {
            DataOutputStream dataOut = new DataOutputStream(new FileOutputStream("ventaGeneral.txt", true));
            DataInputStream dataIn = new DataInputStream(new FileInputStream("usuarioActivo.txt"));
            usuario = dataIn.readUTF();
            dataOut.writeUTF(idVenta);
            dataOut.writeUTF(fecha);
            dataOut.writeUTF(hora);
            dataOut.writeUTF(usuario);
            dataOut.writeUTF(String.valueOf(total));
            tblModel.setRowCount(0);
            JOptionPane.showMessageDialog(this, "¡La venta fue registrada satisfactoriamente!");
            dataOut.close();
            dataIn.close();
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
    }

    private void btnTerminarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTerminarVentaActionPerformed
        guardarVentas();
    }//GEN-LAST:event_btnTerminarVentaActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        DefaultTableModel tblModelCarrito = (DefaultTableModel) tblCarrito.getModel();
        
        for (int i = 0; i < tblCarrito.getRowCount(); i++) {
            String id = tblModelCarrito.getValueAt(i, 0).toString();
            int cantidad = Integer.parseInt(tblModelCarrito.getValueAt(i, 2).toString());
            boolean encontrado = false;
            
            for (int j = 0; j < tblDulceria.getRowCount(); j++) {
                if (id.equals(tblDulceria.getValueAt(j, 0))) {
                    encontrado = true;
                    tblDulceria.setValueAt(String.valueOf(Integer.parseInt(tblDulceria.getValueAt(j, 3).toString()) + cantidad), j, 3);
                }
            }
            
            for (int k = 0; k < tblPapeleria.getRowCount(); k++) {
                if (id.equals(tblPapeleria.getValueAt(k, 0))) {
                    encontrado = true;
                    tblPapeleria.setValueAt(String.valueOf(Integer.parseInt(tblPapeleria.getValueAt(k, 3).toString()) + cantidad), k, 3);
                }
            }
            
            for (int l = 0; l < tblSalud.getRowCount(); l++) {
                if (id.equals(tblSalud.getValueAt(l, 0))) {
                    encontrado = true;
                    tblSalud.setValueAt(String.valueOf(Integer.parseInt(tblSalud.getValueAt(l, 3).toString()) + cantidad), l, 3);
                }
            }
        }
        
        

        tblModelCarrito.setRowCount(0);
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnQuitarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarProductoActionPerformed
        DefaultTableModel tblModelCarrito = (DefaultTableModel) tblCarrito.getModel();
        if (txtCantidad.getText().equals("") || txtID.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Por favor, llene los campos necesarios");
        } else {
            String id = txtID.getText();
            int cantidad = Integer.parseInt(txtCantidad.getText());
            boolean encontrado = false;

            for (int i = 0; i < tblDulceria.getRowCount(); i++) {
                if (id.equals(tblDulceria.getValueAt(i, 0))) {
                    encontrado = true;
                    tblDulceria.setValueAt(String.valueOf(Integer.parseInt(tblDulceria.getValueAt(i, 3).toString()) + cantidad), i, 3);
                }
            }

            for (int j = 0; j < tblPapeleria.getRowCount(); j++) {
                if (id.equals(tblPapeleria.getValueAt(j, 0))) {
                    encontrado = true;
                    tblPapeleria.setValueAt(String.valueOf(Integer.parseInt(tblPapeleria.getValueAt(j, 3).toString()) + cantidad), j, 3);
                }
            }

            for (int k = 0; k < tblSalud.getRowCount(); k++) {
                if (id.equals(tblSalud.getValueAt(k, 0))) {
                    encontrado = true;
                    tblSalud.setValueAt(String.valueOf(Integer.parseInt(tblSalud.getValueAt(k, 3).toString()) + cantidad), k, 3);
                }
            }

            if (!encontrado) {
                JOptionPane.showMessageDialog(this, "No se encontró el ID");
            }

            if (tblCarrito.getRowCount() != 0) {
                for (int i = 0; i < tblCarrito.getRowCount(); i++) {
                    if (id.equals(tblCarrito.getValueAt(i, 0))) {
                        tblCarrito.setValueAt(String.valueOf(Integer.parseInt(tblCarrito.getValueAt(i, 2).toString()) - cantidad), i, 2);
                        if (Integer.parseInt(tblCarrito.getValueAt(i, 2).toString()) <= 0) {
                            tblModelCarrito.removeRow(i);
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Por favor, agregue productos antes");
            }
        }
        actualizarEtiquetas();
    }//GEN-LAST:event_btnQuitarProductoActionPerformed


    private void btnAgregarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarProductoActionPerformed
        DefaultTableModel tblModelCarrito = (DefaultTableModel) tblCarrito.getModel();
        if (txtCantidad.getText().equals("") || txtID.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Por favor, ingresa los campos necesarios");
        } else {
            String id = txtID.getText();
            int cantidad = Integer.parseInt(txtCantidad.getText());
            boolean encontrado = false;

            for (int i = 0; i < tblDulceria.getRowCount(); i++) {
                if (id.equals(tblDulceria.getValueAt(i, 0))) {
                    encontrado = true;
                    if (Integer.parseInt(tblDulceria.getValueAt(i, 3).toString()) > 0 && cantidad <= Integer.parseInt(tblDulceria.getValueAt(i, 3).toString())) {
                        String producto = tblDulceria.getValueAt(i, 1).toString();
                        double precio = Double.parseDouble(tblDulceria.getValueAt(i, 2).toString());
                        double subtotal = cantidad * precio;
                        if (!mismoId(id, tblModelCarrito, true, cantidad)) {
                            String[] data = {id, producto, String.valueOf(cantidad), String.valueOf(precio), String.valueOf(subtotal)};
                            tblModelCarrito.addRow(data);
                        }
                        //DISMINUIR STOCK
                        String cantidadX = String.valueOf(Integer.parseInt(tblDulceria.getValueAt(i, 3).toString()) - cantidad);
                        tblDulceria.setValueAt(cantidadX, i, 3);
                    } else {
                        JOptionPane.showMessageDialog(this, "No se puede agregar esa cantidad");
                    }
                }
            }

            for (int i = 0; i < tblPapeleria.getRowCount(); i++) {
                if (id.equals(tblPapeleria.getValueAt(i, 0))) {
                    encontrado = true;
                    if (Integer.parseInt(tblPapeleria.getValueAt(i, 3).toString()) > 0 && cantidad <= Integer.parseInt(tblPapeleria.getValueAt(i, 3).toString())) {
                        String producto = tblPapeleria.getValueAt(i, 1).toString();
                        double precio = Double.parseDouble(tblPapeleria.getValueAt(i, 2).toString());
                        double subtotal = cantidad * precio;
                        if (!mismoId(id, tblModelCarrito, true, cantidad)) {
                            String[] data = {id, producto, String.valueOf(cantidad), String.valueOf(precio), String.valueOf(subtotal)};
                            tblModelCarrito.addRow(data);
                        }
                        //DISMINUIR STOCK
                        String cantidadX = String.valueOf(Integer.parseInt(tblPapeleria.getValueAt(i, 3).toString()) - cantidad);
                        tblPapeleria.setValueAt(cantidadX, i, 3);
                    } else {
                        JOptionPane.showMessageDialog(this, "No se puede agregar esa cantidad");
                    }
                }
            }

            for (int i = 0; i < tblSalud.getRowCount(); i++) {
                if (id.equals(tblSalud.getValueAt(i, 0))) {
                    encontrado = true;
                    if (Integer.parseInt(tblSalud.getValueAt(i, 3).toString()) > 0 && cantidad <= Integer.parseInt(tblSalud.getValueAt(i, 3).toString())) {
                        String producto = tblSalud.getValueAt(i, 1).toString();
                        double precio = Double.parseDouble(tblSalud.getValueAt(i, 2).toString());
                        double subtotal = cantidad * precio;
                        if (!mismoId(id, tblModelCarrito, true, cantidad)) {
                            String[] data = {id, producto, String.valueOf(cantidad), String.valueOf(precio), String.valueOf(subtotal)};
                            tblModelCarrito.addRow(data);
                        }
                        //DISMINUIR STOCK
                        String cantidadX = String.valueOf(Integer.parseInt(tblSalud.getValueAt(i, 3).toString()) - cantidad);
                        tblSalud.setValueAt(cantidadX, i, 3);
                    } else {
                        JOptionPane.showMessageDialog(this, "No se puede agregar esa cantidad");
                    }
                }
            }

            if (!encontrado) {
                JOptionPane.showMessageDialog(this, "No se encontró el ID");
            }
        }
        actualizarEtiquetas();
    }//GEN-LAST:event_btnAgregarProductoActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        this.dispose();
        FrmMenu menu = new FrmMenu();
        menu.setVisible(true);
    }//GEN-LAST:event_btnSalirActionPerformed

    boolean mismoId(String id, DefaultTableModel tblModel, boolean suma, int cantSumarRestar) {
        boolean repetido = false;
        if (suma) {
            for (int i = 0; i < tblModel.getRowCount(); i++) {
                if (id.equals(tblModel.getValueAt(i, 0))) {
                    String cantidad = tblModel.getValueAt(i, 2).toString();
                    String precio = tblModel.getValueAt(i, 3).toString();
                    tblModel.setValueAt(String.valueOf(Integer.parseInt(cantidad) + cantSumarRestar), i, 2);
                    tblModel.setValueAt(String.valueOf((Integer.parseInt(cantidad) + cantSumarRestar) * Double.parseDouble(precio)), i, 4);
                    repetido = true;
                }
            }
        } else {
            for (int i = 0; i < tblModel.getRowCount(); i++) {
                if (id.equals(tblModel.getValueAt(i, 0))) {
                    String cantidad = tblModel.getValueAt(i, 2).toString();
                    String precio = tblModel.getValueAt(i, 3).toString();
                    tblModel.setValueAt(String.valueOf(Integer.parseInt(cantidad) - cantSumarRestar), i, 2);
                    tblModel.setValueAt(String.valueOf((Integer.parseInt(cantidad) - cantSumarRestar) * Double.parseDouble(precio)), i, 4);
                    repetido = true;
                }
            }
        }
        return repetido;
    }

    void actualizarEtiquetas() {
        DefaultTableModel tblModel = (DefaultTableModel) tblCarrito.getModel();
        double suma = 0;
        int productos = 0;
        for (int i = 0; i < tblModel.getRowCount(); i++) {
            suma += Double.parseDouble(tblModel.getValueAt(i, 4).toString());
            productos += Integer.parseInt(tblModel.getValueAt(i, 2).toString());
        }
        lblTotal.setText("$" + suma);
        lblCambio.setText(String.valueOf(Integer.parseInt(txtMontoNeto.getText()) - suma));
        lblCantProductos.setText(String.valueOf(productos));
    }

    private void tblDulceriaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDulceriaMouseClicked
        DefaultTableModel tblModel = (DefaultTableModel) tblCarrito.getModel();
        if (!tblDulceria.getValueAt(tblDulceria.getSelectedRow(), 3).equals("0")) {
            String idProducto = tblDulceria.getValueAt(tblDulceria.getSelectedRow(), 0).toString();
            String producto = tblDulceria.getValueAt(tblDulceria.getSelectedRow(), 1).toString();
            int cantidadLocal = 1;
            double precio = Double.parseDouble(tblDulceria.getValueAt(tblDulceria.getSelectedRow(), 2).toString());
            double subtotal = cantidadLocal * precio;
            if (!mismoId(idProducto, tblModel, true, 1)) {
                String[] data = {idProducto, producto, String.valueOf(cantidadLocal), String.valueOf(precio), String.valueOf(subtotal)};
                tblModel.addRow(data);
            }
            //DISMINUIR STOCK
            String cantidad = String.valueOf(Integer.parseInt(tblDulceria.getValueAt(tblDulceria.getSelectedRow(), 3).toString()) - 1);
            tblDulceria.setValueAt(cantidad, tblDulceria.getSelectedRow(), 3);
        }
        actualizarEtiquetas();
    }//GEN-LAST:event_tblDulceriaMouseClicked

    private void tblPapeleriaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPapeleriaMouseClicked
        DefaultTableModel tblModel = (DefaultTableModel) tblCarrito.getModel();
        if (!tblPapeleria.getValueAt(tblPapeleria.getSelectedRow(), 3).equals("0")) {
            String idProducto = tblPapeleria.getValueAt(tblPapeleria.getSelectedRow(), 0).toString();
            if (!mismoId(idProducto, tblModel, true, 1)) {
                String producto = tblPapeleria.getValueAt(tblPapeleria.getSelectedRow(), 1).toString();
                int cantidadLocal = 1;
                double precio = Double.parseDouble(tblPapeleria.getValueAt(tblPapeleria.getSelectedRow(), 2).toString());
                double subtotal = cantidadLocal * precio;
                String[] data = {idProducto, producto, String.valueOf(cantidadLocal), String.valueOf(precio), String.valueOf(subtotal)};
                tblModel.addRow(data);
            }
            //DISMINUIR STOCK
            String cantidad = String.valueOf(Integer.parseInt(tblPapeleria.getValueAt(tblPapeleria.getSelectedRow(), 3).toString()) - 1);
            tblPapeleria.setValueAt(cantidad, tblPapeleria.getSelectedRow(), 3);
        }
        actualizarEtiquetas();
    }//GEN-LAST:event_tblPapeleriaMouseClicked

    private void tblSaludMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSaludMouseClicked
        DefaultTableModel tblModel = (DefaultTableModel) tblCarrito.getModel();
        if (!tblSalud.getValueAt(tblSalud.getSelectedRow(), 3).equals("0")) {
            String idProducto = tblSalud.getValueAt(tblSalud.getSelectedRow(), 0).toString();
            if (!mismoId(idProducto, tblModel, true, 1)) {
                String producto = tblSalud.getValueAt(tblSalud.getSelectedRow(), 1).toString();
                int cantidadLocal = 1;
                double precio = Double.parseDouble(tblSalud.getValueAt(tblSalud.getSelectedRow(), 2).toString());
                double subtotal = cantidadLocal * precio;
                String[] data = {idProducto, producto, String.valueOf(cantidadLocal), String.valueOf(precio), String.valueOf(subtotal)};
                tblModel.addRow(data);
            }
            //DISMINUIR STOCK
            String cantidad = String.valueOf(Integer.parseInt(tblSalud.getValueAt(tblSalud.getSelectedRow(), 3).toString()) - 1);
            tblSalud.setValueAt(cantidad, tblSalud.getSelectedRow(), 3);
        }
        actualizarEtiquetas();
    }//GEN-LAST:event_tblSaludMouseClicked

    private void txtMontoNetoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMontoNetoActionPerformed
        actualizarEtiquetas();
    }//GEN-LAST:event_txtMontoNetoActionPerformed

    private void tblCarritoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCarritoMouseClicked
        DefaultTableModel tblModel = (DefaultTableModel) tblCarrito.getModel();
        String idProducto = tblCarrito.getValueAt(tblCarrito.getSelectedRow(), 0).toString();

        for (int i = 0; i < tblDulceria.getRowCount(); i++) {
            if (idProducto.equals(tblDulceria.getValueAt(i, 0))) {
                tblDulceria.setValueAt(String.valueOf(Integer.parseInt(tblDulceria.getValueAt(i, 3).toString()) + 1), i, 3);
            }
        }

        for (int j = 0; j < tblPapeleria.getRowCount(); j++) {
            if (idProducto.equals(tblPapeleria.getValueAt(j, 0))) {
                tblPapeleria.setValueAt(String.valueOf(Integer.parseInt(tblPapeleria.getValueAt(j, 3).toString()) + 1), j, 3);
            }
        }

        for (int k = 0; k < tblSalud.getRowCount(); k++) {
            if (idProducto.equals(tblSalud.getValueAt(k, 0))) {
                tblSalud.setValueAt(String.valueOf(Integer.parseInt(tblSalud.getValueAt(k, 3).toString()) + 1), k, 3);
            }
        }
        mismoId(idProducto, tblModel, false, 1); //!
        if (tblModel.getValueAt(tblCarrito.getSelectedRow(), 2).equals("0")) {
            tblModel.removeRow(tblCarrito.getSelectedRow());
        }
        actualizarEtiquetas();
    }//GEN-LAST:event_tblCarritoMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarProducto;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnQuitarProducto;
    private javax.swing.JButton btnSalir;
    private javax.swing.JButton btnTerminarVenta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel lblCambio;
    private javax.swing.JLabel lblCantProductos;
    private javax.swing.JLabel lblFechaHora;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JPanel pnlBarraInferior;
    private javax.swing.JPanel pnlControl;
    private javax.swing.JPanel pnlElemento;
    private javax.swing.JPanel pnlTotales;
    private javax.swing.JPanel pnlVenta;
    private javax.swing.JScrollPane sPaneDulceria;
    private javax.swing.JScrollPane sPanePapeleria;
    private javax.swing.JScrollPane sPaneSalud;
    private javax.swing.JTabbedPane tabbedPaneModulos;
    private javax.swing.JTable tblCarrito;
    private javax.swing.JTable tblDulceria;
    private javax.swing.JTable tblPapeleria;
    private javax.swing.JTable tblSalud;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtMontoNeto;
    // End of variables declaration//GEN-END:variables
}
